[gd_resource type="Shader" format=2]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.4.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_toon,specular_toon;

const float master_specular = 0.7;
const float master_roughness = 0.2;

// Albedo color variables
uniform vec4 albedo : hint_color = vec4(1.0);
uniform sampler2D texture_albedo : hint_albedo;

// Metallic variables
uniform float metallic : hint_range(0.0, 1.0) = 0.0;
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);

// Scalar variables
uniform float specular_scale : hint_range(0.0, 4.0) = 1.0;

// Roughness variables
uniform float roughness_scale : hint_range(0.0, 4.0) = 1.0;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);

// Normal variables
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16) = 1.0;

// Depth variables
uniform sampler2D texture_depth : hint_black;
uniform float depth_scale = 0.05;
uniform int depth_min_layers = 8;
uniform int depth_max_layers = 32;
uniform vec2 depth_flip = vec2(1.0, 1.0);

const float point_size = 1.0;
const vec3 uv1_scale = vec3(1.0);
const vec3 uv1_offset = vec3(0.0);
const vec3 uv2_scale = vec3(1.0);
const vec3 uv2_offset = vec3(0.0);

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	{
		vec3 view_dir = normalize(normalize(-VERTEX)*mat3(TANGENT*depth_flip.x,-BINORMAL*depth_flip.y,NORMAL));
		float depth = texture(texture_depth, base_uv).r;
		vec2 ofs = base_uv - view_dir.xy / view_dir.z * (depth * depth_scale);
		base_uv=ofs;
	}
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * master_roughness * roughness_scale;
	SPECULAR = master_specular * specular_scale;
	NORMALMAP = texture(texture_normal,base_uv).rgb;
	NORMALMAP_DEPTH = normal_scale;
}
"
